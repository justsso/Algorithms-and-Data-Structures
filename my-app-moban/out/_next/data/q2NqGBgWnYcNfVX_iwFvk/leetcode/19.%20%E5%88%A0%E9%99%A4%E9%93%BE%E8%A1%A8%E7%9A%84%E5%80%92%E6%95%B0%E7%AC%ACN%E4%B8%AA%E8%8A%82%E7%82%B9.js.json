{"pageProps":{"post":{"date":1587363738395,"slug":"19. 删除链表的倒数第N个节点.js","content":"<pre> <code class=\"hljs\" ><span class=\"hljs-comment\">// 给定一个链表，删除链表的倒数第 n 个节点，并且返回链表的头结点。</span>\n<span class=\"hljs-comment\">//进阶：</span>\n<span class=\"hljs-comment\">//</span>\n<span class=\"hljs-comment\">// 你能尝试使用一趟扫描实现吗？</span>\n\n<span class=\"hljs-comment\">/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">ListNode</span><span class=\"hljs-params\">(val)</span> </span>{\n    this.val = val;\n    this.next = <span class=\"hljs-keyword\">null</span>;\n}\n\n<span class=\"hljs-comment\">//思路：利用双指针法，一次遍历出倒数第k个结点，然后删除它</span>\n<span class=\"hljs-comment\">/**\n * <span class=\"hljs-doctag\">@param</span> {ListNode} head\n * <span class=\"hljs-doctag\">@param</span> {number} n\n * <span class=\"hljs-doctag\">@return</span> {ListNode}\n */</span>\n<span class=\"hljs-keyword\">var</span> removeNthFromEnd = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(head, n)</span> </span>{\n    <span class=\"hljs-keyword\">let</span> yuan = <span class=\"hljs-keyword\">new</span> ListNode(<span class=\"hljs-keyword\">null</span>);\n    yuan.next = head;\n    <span class=\"hljs-keyword\">let</span> fast = yuan\n    <span class=\"hljs-keyword\">let</span> slow = yuan\n    <span class=\"hljs-keyword\">while</span> (n &gt; <span class=\"hljs-number\">0</span>) {\n        fast = fast.next\n        n--\n    }\n\n    <span class=\"hljs-comment\">//快指针比慢指针多走了K步，然后两者再同时走，当快指针走到最后时，慢指针指的就是倒数第K个元素</span>\n\n    <span class=\"hljs-keyword\">let</span> pre = slow\n    <span class=\"hljs-keyword\">while</span> (fast) {\n        fast = fast.next\n        pre = slow;\n        slow = slow.next\n    }\n    <span class=\"hljs-comment\">//删除slow指的那个结点，删除某个结点，要找到它的前一个结点</span>\n    <span class=\"hljs-keyword\">if</span> (slow.next) {\n        pre.next = slow.next\n    } <span class=\"hljs-keyword\">else</span> {\n        pre.next = <span class=\"hljs-keyword\">null</span>;\n    }\n    <span class=\"hljs-keyword\">return</span> yuan.next\n};\n\n<span class=\"hljs-comment\">/**\n * <span class=\"hljs-doctag\">@param</span> {ListNode} head\n * <span class=\"hljs-doctag\">@param</span> {number} n\n * <span class=\"hljs-doctag\">@return</span> {ListNode}\n */</span>\n<span class=\"hljs-keyword\">var</span> removeNthFromEnd2 = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(head, n)</span> </span>{\n    <span class=\"hljs-keyword\">let</span> yuan = <span class=\"hljs-keyword\">new</span> ListNode(<span class=\"hljs-keyword\">null</span>)\n    yuan.next = head;\n    <span class=\"hljs-keyword\">let</span> fast = yuan, slow = yuan;\n    <span class=\"hljs-keyword\">while</span> (n) {\n        fast = fast.next\n        n--\n    }\n    <span class=\"hljs-keyword\">while</span> (fast.next) {\n        fast = fast.next\n        slow = slow.next\n    }\n    slow.next = slow.next.next\n    <span class=\"hljs-keyword\">return</span> yuan.next;\n}\n</code> </pre>"}},"__N_SSG":true}