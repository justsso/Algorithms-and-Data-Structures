{"ast":null,"code":"import fs from 'fs';\nimport { join } from 'path';\nimport matter from 'gray-matter';\nconst postsDirectory = join(process.cwd(), '_posts');\nexport function getPostSlugs() {\n  return fs.readdirSync(postsDirectory);\n}\nexport function getPostBySlug(slug, fields = []) {\n  const realSlug = slug.replace(/\\.md$/, '');\n  const fullPath1 = join(postsDirectory, `${realSlug}.md`);\n  const fullPath2 = join(postsDirectory, `${realSlug}.js`);\n  const fullPath = fs.exists(fullPath1) ? fullPath1 : fullPath2;\n  const fileContents = fs.readFileSync(fullPath, 'utf8');\n  const {\n    data,\n    content\n  } = matter(fileContents);\n  const items = {}; // Ensure only the minimal needed data is exposed\n\n  fields.forEach(field => {\n    if (field === 'slug') {\n      items[field] = realSlug;\n    }\n\n    if (field === 'content') {\n      items[field] = content;\n    }\n\n    if (data[field]) {\n      items[field] = data[field];\n    }\n  });\n  return items;\n}\nexport function getAllPosts(fields = []) {\n  const slugs = getPostSlugs();\n  const posts = slugs.map(slug => getPostBySlug(slug, fields)) // sort posts by date in descending order\n  .sort((post1, post2) => post1.date > post2.date ? '-1' : '1');\n  return posts;\n}","map":{"version":3,"sources":["/Users/ssojust/gitproject/Algorithms-and-Data-Structures/my-app-moban/lib/api.js"],"names":["fs","join","matter","postsDirectory","process","cwd","getPostSlugs","readdirSync","getPostBySlug","slug","fields","realSlug","replace","fullPath1","fullPath2","fullPath","exists","fileContents","readFileSync","data","content","items","forEach","field","getAllPosts","slugs","posts","map","sort","post1","post2","date"],"mappings":"AAAA,OAAOA,EAAP,MAAe,IAAf;AACA,SAASC,IAAT,QAAqB,MAArB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AAEA,MAAMC,cAAc,GAAGF,IAAI,CAACG,OAAO,CAACC,GAAR,EAAD,EAAgB,QAAhB,CAA3B;AAEA,OAAO,SAASC,YAAT,GAAwB;AAC7B,SAAON,EAAE,CAACO,WAAH,CAAeJ,cAAf,CAAP;AACD;AAED,OAAO,SAASK,aAAT,CAAuBC,IAAvB,EAA6BC,MAAM,GAAG,EAAtC,EAA0C;AAC/C,QAAMC,QAAQ,GAAGF,IAAI,CAACG,OAAL,CAAa,OAAb,EAAsB,EAAtB,CAAjB;AACA,QAAMC,SAAS,GAAGZ,IAAI,CAACE,cAAD,EAAkB,GAAEQ,QAAS,KAA7B,CAAtB;AACA,QAAMG,SAAS,GAAGb,IAAI,CAACE,cAAD,EAAkB,GAAEQ,QAAS,KAA7B,CAAtB;AACA,QAAMI,QAAQ,GAAGf,EAAE,CAACgB,MAAH,CAAUH,SAAV,IAAuBA,SAAvB,GAAmCC,SAApD;AACA,QAAMG,YAAY,GAAGjB,EAAE,CAACkB,YAAH,CAAgBH,QAAhB,EAA0B,MAA1B,CAArB;AACA,QAAM;AAAEI,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAoBlB,MAAM,CAACe,YAAD,CAAhC;AAEA,QAAMI,KAAK,GAAG,EAAd,CAR+C,CAU/C;;AACAX,EAAAA,MAAM,CAACY,OAAP,CAAeC,KAAK,IAAI;AACtB,QAAIA,KAAK,KAAK,MAAd,EAAsB;AACpBF,MAAAA,KAAK,CAACE,KAAD,CAAL,GAAeZ,QAAf;AACD;;AACD,QAAIY,KAAK,KAAK,SAAd,EAAyB;AACvBF,MAAAA,KAAK,CAACE,KAAD,CAAL,GAAeH,OAAf;AACD;;AAED,QAAID,IAAI,CAACI,KAAD,CAAR,EAAiB;AACfF,MAAAA,KAAK,CAACE,KAAD,CAAL,GAAeJ,IAAI,CAACI,KAAD,CAAnB;AACD;AACF,GAXD;AAaA,SAAOF,KAAP;AACD;AAED,OAAO,SAASG,WAAT,CAAqBd,MAAM,GAAG,EAA9B,EAAkC;AACvC,QAAMe,KAAK,GAAGnB,YAAY,EAA1B;AACA,QAAMoB,KAAK,GAAGD,KAAK,CAChBE,GADW,CACPlB,IAAI,IAAID,aAAa,CAACC,IAAD,EAAOC,MAAP,CADd,EAEZ;AAFY,GAGXkB,IAHW,CAGN,CAACC,KAAD,EAAQC,KAAR,KAAmBD,KAAK,CAACE,IAAN,GAAaD,KAAK,CAACC,IAAnB,GAA0B,IAA1B,GAAiC,GAH9C,CAAd;AAIA,SAAOL,KAAP;AACD","sourcesContent":["import fs from 'fs'\nimport { join } from 'path'\nimport matter from 'gray-matter'\n\nconst postsDirectory = join(process.cwd(), '_posts')\n\nexport function getPostSlugs() {\n  return fs.readdirSync(postsDirectory)\n}\n\nexport function getPostBySlug(slug, fields = []) {\n  const realSlug = slug.replace(/\\.md$/, '')\n  const fullPath1 = join(postsDirectory, `${realSlug}.md`)\n  const fullPath2 = join(postsDirectory, `${realSlug}.js`)\n  const fullPath = fs.exists(fullPath1) ? fullPath1 : fullPath2\n  const fileContents = fs.readFileSync(fullPath, 'utf8')\n  const { data, content } = matter(fileContents)\n\n  const items = {}\n\n  // Ensure only the minimal needed data is exposed\n  fields.forEach(field => {\n    if (field === 'slug') {\n      items[field] = realSlug\n    }\n    if (field === 'content') {\n      items[field] = content\n    }\n\n    if (data[field]) {\n      items[field] = data[field]\n    }\n  })\n\n  return items\n}\n\nexport function getAllPosts(fields = []) {\n  const slugs = getPostSlugs()\n  const posts = slugs\n    .map(slug => getPostBySlug(slug, fields))\n    // sort posts by date in descending order\n    .sort((post1, post2) => (post1.date > post2.date ? '-1' : '1'))\n  return posts\n}\n"]},"metadata":{},"sourceType":"module"}