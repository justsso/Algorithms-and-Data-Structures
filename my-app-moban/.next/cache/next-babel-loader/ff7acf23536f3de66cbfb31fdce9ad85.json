{"ast":null,"code":"import fs from 'fs';\nimport { join } from 'path';\nimport matter from 'gray-matter';\nconst postsDirectory = join(process.cwd(), '_posts');\nexport function getPostSlugs() {\n  return fs.readdirSync(postsDirectory);\n}\nexport function getPostBySlug(slug, fields = []) {\n  const realSlug = slug;\n  const fullPath = join(postsDirectory, `${realSlug}.md`);\n  const fileContents = fs.readFileSync(fullPath, 'utf8');\n  const {\n    data,\n    content\n  } = matter(fileContents);\n  const items = {}; // Ensure only the minimal needed data is exposed\n\n  fields.forEach(field => {\n    if (field === 'slug') {\n      items[field] = realSlug;\n    }\n\n    if (field === 'content') {\n      items[field] = content;\n    }\n\n    if (data[field]) {\n      items[field] = data[field];\n    }\n  });\n  return items;\n}\nexport function getAllPosts(fields = []) {\n  const slugs = getPostSlugs();\n  const posts = slugs.map(slug => getPostBySlug(slug, fields)) // sort posts by date in descending order\n  .sort((post1, post2) => post1.date > post2.date ? '-1' : '1');\n  return posts;\n}\n\nfunction isExists(filePath) {\n  return new Promise((resolve, reject) => {\n    fs.exists(filePath, e => {\n      if (e) {\n        reject(e);\n      } else {\n        resolve(true);\n      }\n    });\n  });\n}","map":{"version":3,"sources":["/Users/ssojust/gitproject/Algorithms-and-Data-Structures/my-app-moban/lib/api.js"],"names":["fs","join","matter","postsDirectory","process","cwd","getPostSlugs","readdirSync","getPostBySlug","slug","fields","realSlug","fullPath","fileContents","readFileSync","data","content","items","forEach","field","getAllPosts","slugs","posts","map","sort","post1","post2","date","isExists","filePath","Promise","resolve","reject","exists","e"],"mappings":"AAAA,OAAOA,EAAP,MAAe,IAAf;AACA,SAAQC,IAAR,QAAmB,MAAnB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AAEA,MAAMC,cAAc,GAAGF,IAAI,CAACG,OAAO,CAACC,GAAR,EAAD,EAAgB,QAAhB,CAA3B;AAEA,OAAO,SAASC,YAAT,GAAwB;AAC3B,SAAON,EAAE,CAACO,WAAH,CAAeJ,cAAf,CAAP;AACH;AAED,OAAO,SAASK,aAAT,CAAuBC,IAAvB,EAA6BC,MAAM,GAAG,EAAtC,EAA0C;AAC7C,QAAMC,QAAQ,GAAGF,IAAjB;AACA,QAAMG,QAAQ,GAAGX,IAAI,CAACE,cAAD,EAAkB,GAAEQ,QAAS,KAA7B,CAArB;AACA,QAAME,YAAY,GAAGb,EAAE,CAACc,YAAH,CAAgBF,QAAhB,EAA0B,MAA1B,CAArB;AACA,QAAM;AAACG,IAAAA,IAAD;AAAOC,IAAAA;AAAP,MAAkBd,MAAM,CAACW,YAAD,CAA9B;AAEA,QAAMI,KAAK,GAAG,EAAd,CAN6C,CAQ7C;;AACAP,EAAAA,MAAM,CAACQ,OAAP,CAAeC,KAAK,IAAI;AACpB,QAAIA,KAAK,KAAK,MAAd,EAAsB;AAClBF,MAAAA,KAAK,CAACE,KAAD,CAAL,GAAeR,QAAf;AACH;;AACD,QAAIQ,KAAK,KAAK,SAAd,EAAyB;AACrBF,MAAAA,KAAK,CAACE,KAAD,CAAL,GAAeH,OAAf;AACH;;AAED,QAAID,IAAI,CAACI,KAAD,CAAR,EAAiB;AACbF,MAAAA,KAAK,CAACE,KAAD,CAAL,GAAeJ,IAAI,CAACI,KAAD,CAAnB;AACH;AACJ,GAXD;AAaA,SAAOF,KAAP;AACH;AAED,OAAO,SAASG,WAAT,CAAqBV,MAAM,GAAG,EAA9B,EAAkC;AACrC,QAAMW,KAAK,GAAGf,YAAY,EAA1B;AACA,QAAMgB,KAAK,GAAGD,KAAK,CACdE,GADS,CACLd,IAAI,IAAID,aAAa,CAACC,IAAD,EAAOC,MAAP,CADhB,EAEV;AAFU,GAGTc,IAHS,CAGJ,CAACC,KAAD,EAAQC,KAAR,KAAmBD,KAAK,CAACE,IAAN,GAAaD,KAAK,CAACC,IAAnB,GAA0B,IAA1B,GAAiC,GAHhD,CAAd;AAIA,SAAOL,KAAP;AACH;;AAED,SAASM,QAAT,CAAkBC,QAAlB,EAA4B;AACxB,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpChC,IAAAA,EAAE,CAACiC,MAAH,CAAUJ,QAAV,EAAqBK,CAAD,IAAO;AACvB,UAAIA,CAAJ,EAAO;AACHF,QAAAA,MAAM,CAACE,CAAD,CAAN;AACH,OAFD,MAEO;AACHH,QAAAA,OAAO,CAAC,IAAD,CAAP;AACH;AACJ,KAND;AAOH,GARM,CAAP;AASH","sourcesContent":["import fs from 'fs'\nimport {join} from 'path'\nimport matter from 'gray-matter'\n\nconst postsDirectory = join(process.cwd(), '_posts')\n\nexport function getPostSlugs() {\n    return fs.readdirSync(postsDirectory)\n}\n\nexport function getPostBySlug(slug, fields = []) {\n    const realSlug = slug\n    const fullPath = join(postsDirectory, `${realSlug}.md`)\n    const fileContents = fs.readFileSync(fullPath, 'utf8')\n    const {data, content} = matter(fileContents)\n\n    const items = {}\n\n    // Ensure only the minimal needed data is exposed\n    fields.forEach(field => {\n        if (field === 'slug') {\n            items[field] = realSlug\n        }\n        if (field === 'content') {\n            items[field] = content\n        }\n\n        if (data[field]) {\n            items[field] = data[field]\n        }\n    })\n\n    return items\n}\n\nexport function getAllPosts(fields = []) {\n    const slugs = getPostSlugs()\n    const posts = slugs\n        .map(slug => getPostBySlug(slug, fields))\n        // sort posts by date in descending order\n        .sort((post1, post2) => (post1.date > post2.date ? '-1' : '1'))\n    return posts\n}\n\nfunction isExists(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.exists(filePath, (e) => {\n            if (e) {\n                reject(e)\n            } else {\n                resolve(true)\n            }\n        })\n    })\n}\n"]},"metadata":{},"sourceType":"module"}