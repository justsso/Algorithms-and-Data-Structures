{"ast":null,"code":"import fs from 'fs';\nimport { join } from 'path';\nimport matter from 'gray-matter';\n\nconst hljs = require('highlight.js');\n\nconst data_struturesDirectory = join(process.cwd(), '../data_structures');\nconst leetcode_jsDirectory = join(process.cwd(), '../leetcode_js/'); //返回两类\n\nexport function getPostSlugs() {\n  // return fs.readdirSync(postsDirectory)\n  let files = fs.readdirSync(data_struturesDirectory);\n  let files2 = fs.readdirSync(leetcode_jsDirectory);\n  return {\n    data_strutures: files,\n    leetcode: files2\n  };\n}\nexport function getPostBySlug(slug, fields = []) {\n  const realSlug = slug;\n  const suffix = slug.slice(slug.lastIndexOf('.')); // const fullPath = join(postsDirectory, `${realSlug}`)\n\n  let fileContents;\n  const isDirectory = fs.statSync(leetcode_jsDirectory + slug).isDirectory();\n\n  if (!isDirectory) {\n    fileContents = fs.readFileSync(join(process.cwd(), `../${slug}`), 'utf8');\n  }\n\n  let items = {};\n\n  if (suffix === '.md') {\n    const {\n      data,\n      content\n    } = matter(fileContents); // Ensure only the minimal needed data is exposed\n\n    fields.forEach(field => {\n      if (field === 'slug') {\n        items[field] = realSlug;\n      }\n\n      if (field === 'content') {\n        items[field] = content;\n      }\n\n      if (data[field]) {\n        items[field] = data[field];\n      }\n    });\n  } else if (suffix === '.js') {\n    //返回js文件内容\n    items.slug = slug;\n    items.title = slug; // items.date = new Date()\n\n    const highlightedCode = hljs.highlightAuto(fileContents).value;\n    items.content = highlightedCode;\n  }\n\n  return items;\n}\nexport function getAllPosts(fields = []) {\n  const {\n    data_strutures,\n    leetcode\n  } = getPostSlugs(); // console.log(data_strutures, leetcode, 68)\n  // const posts1 = data_strutures\n  //     .map(slug => getPostBySlug(slug, fields))\n  //     // sort leetcode by date in descending order\n  //     .sort((post1, post2) => (post1.date > post2.date ? '-1' : '1'))\n\n  const posts2 = leetcode.map(item => getPostBySlug(item, fields)).sort((post1, post2) => post1.date > post2.date ? '-1' : '1');\n  return {\n    posts2\n  };\n}","map":{"version":3,"sources":["/Users/ssojust/gitproject/Algorithms-and-Data-Structures/my-app-moban/lib/api.js"],"names":["fs","join","matter","hljs","require","data_struturesDirectory","process","cwd","leetcode_jsDirectory","getPostSlugs","files","readdirSync","files2","data_strutures","leetcode","getPostBySlug","slug","fields","realSlug","suffix","slice","lastIndexOf","fileContents","isDirectory","statSync","readFileSync","items","data","content","forEach","field","title","highlightedCode","highlightAuto","value","getAllPosts","posts2","map","item","sort","post1","post2","date"],"mappings":"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","sourcesContent":["import fs from 'fs'\nimport {join} from 'path'\nimport matter from 'gray-matter'\n\nconst hljs = require('highlight.js');\nconst data_struturesDirectory = join(process.cwd(), '../data_structures')\nconst leetcode_jsDirectory = join(process.cwd(), '../leetcode_js/')\n\n//返回两类\nexport function getPostSlugs() {\n    // return fs.readdirSync(postsDirectory)\n    let files = fs.readdirSync(data_struturesDirectory);\n    let files2 = fs.readdirSync(leetcode_jsDirectory);\n\n    return {\n        data_strutures: files,\n        leetcode: files2\n    }\n}\n\nexport function getPostBySlug(slug, fields = []) {\n    const realSlug = slug\n    const suffix = slug.slice(slug.lastIndexOf('.'))\n    // const fullPath = join(postsDirectory, `${realSlug}`)\n    let fileContents;\n    const isDirectory = fs.statSync(leetcode_jsDirectory+slug).isDirectory()\n    if (!isDirectory) {\n        fileContents = fs.readFileSync(join(process.cwd(), `../${slug}`), 'utf8')\n    }\n    let items = {}\n    if (suffix === '.md') {\n        const {data, content} = matter(fileContents)\n        // Ensure only the minimal needed data is exposed\n        fields.forEach(field => {\n            if (field === 'slug') {\n                items[field] = realSlug\n            }\n            if (field === 'content') {\n                items[field] = content\n            }\n\n            if (data[field]) {\n                items[field] = data[field]\n            }\n        })\n    } else if (suffix === '.js') {\n        //返回js文件内容\n\n        items.slug = slug\n        items.title = slug\n        // items.date = new Date()\n        const highlightedCode =\n            hljs.highlightAuto(fileContents).value\n        items.content = highlightedCode\n\n    }\n\n    return items\n}\n\nexport function getAllPosts(fields = []) {\n    const {data_strutures, leetcode} = getPostSlugs()\n    // console.log(data_strutures, leetcode, 68)\n    // const posts1 = data_strutures\n    //     .map(slug => getPostBySlug(slug, fields))\n    //     // sort leetcode by date in descending order\n    //     .sort((post1, post2) => (post1.date > post2.date ? '-1' : '1'))\n    const posts2 = leetcode\n        .map(item => getPostBySlug(item, fields))\n        .sort((post1, post2) => (post1.date > post2.date ? '-1' : '1'))\n    return { posts2}\n}\n\n"]},"metadata":{},"sourceType":"module"}