{"ast":null,"code":"import fs from 'fs';\nimport { join } from 'path';\nimport matter from 'gray-matter';\nconst postsDirectory = join(process.cwd(), '_posts');\nexport function getPostSlugs() {\n  return fs.readdirSync(postsDirectory);\n}\nexport function getPostBySlug(slug, fields = []) {\n  const realSlug = slug;\n  const suffix = slug.slice(slug.lastIndexOf('.'));\n  const fullPath = join(postsDirectory, `${realSlug}`);\n  const fileContents = fs.readFileSync(fullPath, 'utf8');\n  let items = {};\n\n  if (suffix === 'md') {\n    const {\n      data,\n      content\n    } = matter(fileContents); // Ensure only the minimal needed data is exposed\n\n    fields.forEach(field => {\n      if (field === 'slug') {\n        items[field] = realSlug;\n      }\n\n      if (field === 'content') {\n        items[field] = content;\n      }\n\n      if (data[field]) {\n        items[field] = data[field];\n      }\n    });\n  } else {\n    //返回js文件内容\n    items.content = fileContents;\n    items.slug = slug;\n    item.title = slug;\n  }\n\n  return items;\n}\nexport function getAllPosts(fields = []) {\n  const slugs = getPostSlugs();\n  const posts = slugs.map(slug => getPostBySlug(slug, fields)) // sort posts by date in descending order\n  .sort((post1, post2) => post1.date > post2.date ? '-1' : '1');\n  return posts;\n}\n\nfunction isExists(filePath) {\n  return new Promise((resolve, reject) => {\n    fs.exists(filePath, e => {\n      if (e) {\n        reject(e);\n      } else {\n        resolve(true);\n      }\n    });\n  });\n}","map":{"version":3,"sources":["/Users/ssojust/gitproject/Algorithms-and-Data-Structures/my-app-moban/lib/api.js"],"names":["fs","join","matter","postsDirectory","process","cwd","getPostSlugs","readdirSync","getPostBySlug","slug","fields","realSlug","suffix","slice","lastIndexOf","fullPath","fileContents","readFileSync","items","data","content","forEach","field","item","title","getAllPosts","slugs","posts","map","sort","post1","post2","date","isExists","filePath","Promise","resolve","reject","exists","e"],"mappings":"AAAA,OAAOA,EAAP,MAAe,IAAf;AACA,SAAQC,IAAR,QAAmB,MAAnB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AAEA,MAAMC,cAAc,GAAGF,IAAI,CAACG,OAAO,CAACC,GAAR,EAAD,EAAgB,QAAhB,CAA3B;AAEA,OAAO,SAASC,YAAT,GAAwB;AAC3B,SAAON,EAAE,CAACO,WAAH,CAAeJ,cAAf,CAAP;AACH;AAED,OAAO,SAASK,aAAT,CAAuBC,IAAvB,EAA6BC,MAAM,GAAG,EAAtC,EAA0C;AAC7C,QAAMC,QAAQ,GAAGF,IAAjB;AACA,QAAMG,MAAM,GAAIH,IAAI,CAACI,KAAL,CAAWJ,IAAI,CAACK,WAAL,CAAiB,GAAjB,CAAX,CAAhB;AACA,QAAMC,QAAQ,GAAGd,IAAI,CAACE,cAAD,EAAkB,GAAEQ,QAAS,EAA7B,CAArB;AACA,QAAMK,YAAY,GAAGhB,EAAE,CAACiB,YAAH,CAAgBF,QAAhB,EAA0B,MAA1B,CAArB;AACA,MAAIG,KAAK,GAAG,EAAZ;;AACA,MAAGN,MAAM,KAAK,IAAd,EAAmB;AACf,UAAM;AAACO,MAAAA,IAAD;AAAOC,MAAAA;AAAP,QAAkBlB,MAAM,CAACc,YAAD,CAA9B,CADe,CAKf;;AACAN,IAAAA,MAAM,CAACW,OAAP,CAAeC,KAAK,IAAI;AACpB,UAAIA,KAAK,KAAK,MAAd,EAAsB;AAClBJ,QAAAA,KAAK,CAACI,KAAD,CAAL,GAAeX,QAAf;AACH;;AACD,UAAIW,KAAK,KAAK,SAAd,EAAyB;AACrBJ,QAAAA,KAAK,CAACI,KAAD,CAAL,GAAeF,OAAf;AACH;;AAED,UAAID,IAAI,CAACG,KAAD,CAAR,EAAiB;AACbJ,QAAAA,KAAK,CAACI,KAAD,CAAL,GAAeH,IAAI,CAACG,KAAD,CAAnB;AACH;AACJ,KAXD;AAYH,GAlBD,MAkBM;AACF;AAEAJ,IAAAA,KAAK,CAACE,OAAN,GAAgBJ,YAAhB;AACAE,IAAAA,KAAK,CAACT,IAAN,GAAaA,IAAb;AACAc,IAAAA,IAAI,CAACC,KAAL,GAAaf,IAAb;AAEH;;AAED,SAAOS,KAAP;AACH;AAED,OAAO,SAASO,WAAT,CAAqBf,MAAM,GAAG,EAA9B,EAAkC;AACrC,QAAMgB,KAAK,GAAGpB,YAAY,EAA1B;AACA,QAAMqB,KAAK,GAAGD,KAAK,CACdE,GADS,CACLnB,IAAI,IAAID,aAAa,CAACC,IAAD,EAAOC,MAAP,CADhB,EAEV;AAFU,GAGTmB,IAHS,CAGJ,CAACC,KAAD,EAAQC,KAAR,KAAmBD,KAAK,CAACE,IAAN,GAAaD,KAAK,CAACC,IAAnB,GAA0B,IAA1B,GAAiC,GAHhD,CAAd;AAIA,SAAOL,KAAP;AACH;;AAED,SAASM,QAAT,CAAkBC,QAAlB,EAA4B;AACxB,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpCrC,IAAAA,EAAE,CAACsC,MAAH,CAAUJ,QAAV,EAAqBK,CAAD,IAAO;AACvB,UAAIA,CAAJ,EAAO;AACHF,QAAAA,MAAM,CAACE,CAAD,CAAN;AACH,OAFD,MAEO;AACHH,QAAAA,OAAO,CAAC,IAAD,CAAP;AACH;AACJ,KAND;AAOH,GARM,CAAP;AASH","sourcesContent":["import fs from 'fs'\nimport {join} from 'path'\nimport matter from 'gray-matter'\n\nconst postsDirectory = join(process.cwd(), '_posts')\n\nexport function getPostSlugs() {\n    return fs.readdirSync(postsDirectory)\n}\n\nexport function getPostBySlug(slug, fields = []) {\n    const realSlug = slug\n    const suffix =  slug.slice(slug.lastIndexOf('.'))\n    const fullPath = join(postsDirectory, `${realSlug}`)\n    const fileContents = fs.readFileSync(fullPath, 'utf8')\n    let items = {}\n    if(suffix === 'md'){\n        const {data, content} = matter(fileContents)\n\n\n\n        // Ensure only the minimal needed data is exposed\n        fields.forEach(field => {\n            if (field === 'slug') {\n                items[field] = realSlug\n            }\n            if (field === 'content') {\n                items[field] = content\n            }\n\n            if (data[field]) {\n                items[field] = data[field]\n            }\n        })\n    }else {\n        //返回js文件内容\n\n        items.content = fileContents\n        items.slug = slug\n        item.title = slug\n\n    }\n\n    return items\n}\n\nexport function getAllPosts(fields = []) {\n    const slugs = getPostSlugs()\n    const posts = slugs\n        .map(slug => getPostBySlug(slug, fields))\n        // sort posts by date in descending order\n        .sort((post1, post2) => (post1.date > post2.date ? '-1' : '1'))\n    return posts\n}\n\nfunction isExists(filePath) {\n    return new Promise((resolve, reject) => {\n        fs.exists(filePath, (e) => {\n            if (e) {\n                reject(e)\n            } else {\n                resolve(true)\n            }\n        })\n    })\n}\n"]},"metadata":{},"sourceType":"module"}