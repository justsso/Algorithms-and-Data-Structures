{"ast":null,"code":"import { fs } from 'fs';\nimport { join } from 'path';\nimport matter from 'gray-matter';\n\nvar hljs = require('highlight.js');\n\nvar postsDirectory = join(process.cwd(), '_posts');\nvar data_struturesDirectory = join(process.cwd(), '../data_structures');\nvar leetcode_jsDirectory = join(process.cwd(), '../leetcode_js'); //返回两类\n\nexport function getPostSlugs() {\n  // return fs.readdirSync(postsDirectory)\n  var files = fs.readdirSync(data_struturesDirectory);\n  var files2 = fs.readdirSync(leetcode_jsDirectory);\n  files = files.map(function (item) {\n    return \"data_structures/\".concat(item);\n  });\n  files2 = files2.map(function (item) {\n    return \"leetcode_js/\".concat(item);\n  });\n  return {\n    data_strutures: files,\n    leetcode: files2\n  };\n}\nexport function getPostBySlug(slug) {\n  var fields = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var realSlug = slug;\n  var suffix = slug.slice(slug.lastIndexOf('.')); // const fullPath = join(postsDirectory, `${realSlug}`)\n\n  var fileContents;\n  var isDirectory = fs.statSync(join(process.cwd(), \"../\".concat(slug))).isDirectory();\n\n  if (!isDirectory) {\n    fileContents = fs.readFileSync(join(process.cwd(), \"../\".concat(slug)), 'utf8');\n  }\n\n  var items = {};\n\n  if (suffix === '.md') {\n    var _matter = matter(fileContents),\n        data = _matter.data,\n        content = _matter.content; // Ensure only the minimal needed data is exposed\n\n\n    fields.forEach(function (field) {\n      if (field === 'slug') {\n        items[field] = realSlug;\n      }\n\n      if (field === 'content') {\n        items[field] = content;\n      }\n\n      if (data[field]) {\n        items[field] = data[field];\n      }\n    });\n  } else if (suffix === '.js') {\n    //返回js文件内容\n    items.slug = slug;\n    items.title = slug; // items.date = new Date()\n\n    var highlightedCode = hljs.highlightAuto(fileContents).value;\n    items.content = highlightedCode;\n  }\n\n  return items;\n}\nexport function getAllPosts() {\n  var fields = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n  var _getPostSlugs = getPostSlugs(),\n      data_strutures = _getPostSlugs.data_strutures,\n      leetcode = _getPostSlugs.leetcode; // console.log(data_strutures, leetcode, 68)\n\n\n  var posts1 = data_strutures.map(function (slug) {\n    return getPostBySlug(slug, fields);\n  }) // sort posts by date in descending order\n  .sort(function (post1, post2) {\n    return post1.date > post2.date ? '-1' : '1';\n  });\n  var posts2 = leetcode.map(function (item) {\n    return getPostBySlug(item, fields);\n  }).sort(function (post1, post2) {\n    return post1.date > post2.date ? '-1' : '1';\n  });\n  return {\n    posts1: posts1,\n    posts2: posts2\n  };\n}","map":{"version":3,"sources":["/Users/ssojust/gitproject/Algorithms-and-Data-Structures/my-app-moban/lib/api.js"],"names":["fs","join","matter","hljs","require","postsDirectory","process","cwd","data_struturesDirectory","leetcode_jsDirectory","getPostSlugs","files","readdirSync","files2","map","item","data_strutures","leetcode","getPostBySlug","slug","fields","realSlug","suffix","slice","lastIndexOf","fileContents","isDirectory","statSync","readFileSync","items","data","content","forEach","field","title","highlightedCode","highlightAuto","value","getAllPosts","posts1","sort","post1","post2","date","posts2"],"mappings":"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","sourcesContent":["import {fs} from 'fs'\nimport {join} from 'path'\nimport matter from 'gray-matter'\n\nconst hljs = require('highlight.js');\nconst postsDirectory = join(process.cwd(), '_posts')\nconst data_struturesDirectory = join(process.cwd(), '../data_structures')\nconst leetcode_jsDirectory = join(process.cwd(), '../leetcode_js')\n\n//返回两类\nexport function getPostSlugs() {\n    // return fs.readdirSync(postsDirectory)\n    let files = fs.readdirSync(data_struturesDirectory);\n    let files2 = fs.readdirSync(leetcode_jsDirectory);\n    files = files.map(item => {\n        return `data_structures/${item}`\n    })\n\n    files2 = files2.map(item => {\n        return `leetcode_js/${item}`\n    })\n\n    return {\n        data_strutures: files,\n        leetcode: files2\n    }\n}\n\nexport function getPostBySlug(slug, fields = []) {\n    const realSlug = slug\n    const suffix = slug.slice(slug.lastIndexOf('.'))\n    // const fullPath = join(postsDirectory, `${realSlug}`)\n    let fileContents;\n    const isDirectory = fs.statSync(join(process.cwd(), `../${slug}`)).isDirectory()\n    if (!isDirectory) {\n        fileContents = fs.readFileSync(join(process.cwd(), `../${slug}`), 'utf8')\n    }\n    let items = {}\n    if (suffix === '.md') {\n        const {data, content} = matter(fileContents)\n        // Ensure only the minimal needed data is exposed\n        fields.forEach(field => {\n            if (field === 'slug') {\n                items[field] = realSlug\n            }\n            if (field === 'content') {\n                items[field] = content\n            }\n\n            if (data[field]) {\n                items[field] = data[field]\n            }\n        })\n    } else if (suffix === '.js') {\n        //返回js文件内容\n\n        items.slug = slug\n        items.title = slug\n        // items.date = new Date()\n        const highlightedCode =\n            hljs.highlightAuto(fileContents).value\n        items.content = highlightedCode\n\n    }\n\n    return items\n}\n\nexport function getAllPosts(fields = []) {\n    const {data_strutures, leetcode} = getPostSlugs()\n    // console.log(data_strutures, leetcode, 68)\n    const posts1 = data_strutures\n        .map(slug => getPostBySlug(slug, fields))\n        // sort posts by date in descending order\n        .sort((post1, post2) => (post1.date > post2.date ? '-1' : '1'))\n    const posts2 = leetcode\n        .map(item => getPostBySlug(item, fields))\n        .sort((post1, post2) => (post1.date > post2.date ? '-1' : '1'))\n    return {posts1, posts2}\n}\n\n"]},"metadata":{},"sourceType":"module"}