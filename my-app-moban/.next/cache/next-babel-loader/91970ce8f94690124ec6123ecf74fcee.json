{"ast":null,"code":"import fs from 'fs';\nimport { join } from 'path';\nimport matter from 'gray-matter';\n\nconst hljs = require('highlight.js');\n\nconst postsDirectory = join(process.cwd(), '_posts');\nconst data_struturesDirectory = join(process.cwd(), '../data_structures');\nconst leetcode_jsDirectory = join(process.cwd(), '../leetcode_js'); //返回两类\n\nexport function getPostSlugs() {\n  // return fs.readdirSync(postsDirectory)\n  let files = fs.readdirSync(data_struturesDirectory);\n  let files2 = fs.readdirSync(leetcode_jsDirectory);\n  files = files.map(item => {\n    return join(data_struturesDirectory, item);\n  });\n  files2 = files2.map(item => {\n    return join(leetcode_jsDirectory, item);\n  });\n  return {\n    data_strutures: files,\n    leetcode: files2\n  };\n}\nexport function getPostBySlug(slug, fields = []) {\n  const realSlug = slug;\n  console.log(slug, 313131);\n  const suffix = slug.slice(slug.lastIndexOf('.')); // const fullPath = join(postsDirectory, `${realSlug}`)\n\n  let fileContents;\n  const isDirectory = fs.statSync(slug).isDirectory();\n  console.log(isDirectory, 'isDirctory');\n\n  if (!isDirectory) {\n    fileContents = fs.readFileSync(slug, 'utf8');\n  }\n\n  let items = {};\n\n  if (suffix === '.md') {\n    const {\n      data,\n      content\n    } = matter(fileContents); // Ensure only the minimal needed data is exposed\n\n    fields.forEach(field => {\n      if (field === 'slug') {\n        items[field] = realSlug;\n      }\n\n      if (field === 'content') {\n        items[field] = content;\n      }\n\n      if (data[field]) {\n        items[field] = data[field];\n      }\n    });\n  } else {\n    //返回js文件内容\n    items.slug = slug;\n    items.title = slug; // items.date = new Date()\n\n    console.log(fileContents);\n    const highlightedCode = hljs.highlightAuto(fileContents).value;\n    items.content = highlightedCode;\n  }\n\n  return items;\n}\nexport function getAllPosts(fields = []) {\n  const {\n    data_strutures,\n    leetcode\n  } = getPostSlugs(); // console.log(data_strutures, leetcode, 68)\n\n  const posts1 = data_strutures.map(slug => getPostBySlug(slug, fields)) // sort posts by date in descending order\n  .sort((post1, post2) => post1.date > post2.date ? '-1' : '1');\n  const posts2 = leetcode.map(item => getPostBySlug(item, fields)).sort((post1, post2) => post1.date > post2.date ? '-1' : '1');\n  return {\n    posts1,\n    posts2\n  };\n}","map":{"version":3,"sources":["/Users/ssojust/gitproject/Algorithms-and-Data-Structures/my-app-moban/lib/api.js"],"names":["fs","join","matter","hljs","require","postsDirectory","process","cwd","data_struturesDirectory","leetcode_jsDirectory","getPostSlugs","files","readdirSync","files2","map","item","data_strutures","leetcode","getPostBySlug","slug","fields","realSlug","console","log","suffix","slice","lastIndexOf","fileContents","isDirectory","statSync","readFileSync","items","data","content","forEach","field","title","highlightedCode","highlightAuto","value","getAllPosts","posts1","sort","post1","post2","date","posts2"],"mappings":"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","sourcesContent":["import fs from 'fs'\nimport {join} from 'path'\nimport matter from 'gray-matter'\n\nconst hljs = require('highlight.js');\nconst postsDirectory = join(process.cwd(), '_posts')\nconst data_struturesDirectory = join(process.cwd(), '../data_structures')\nconst leetcode_jsDirectory = join(process.cwd(), '../leetcode_js')\n\n//返回两类\nexport function getPostSlugs() {\n    // return fs.readdirSync(postsDirectory)\n    let files = fs.readdirSync(data_struturesDirectory);\n    let files2 = fs.readdirSync(leetcode_jsDirectory);\n    files = files.map(item => {\n        return join(data_struturesDirectory, item)\n    })\n\n    files2 = files2.map(item => {\n        return join(leetcode_jsDirectory, item)\n    })\n\n    return {\n        data_strutures: files,\n        leetcode: files2\n    }\n}\n\nexport function getPostBySlug(slug, fields = []) {\n    const realSlug = slug\n    console.log(slug, 313131)\n    const suffix = slug.slice(slug.lastIndexOf('.'))\n    // const fullPath = join(postsDirectory, `${realSlug}`)\n    let fileContents;\n    const isDirectory = fs.statSync(slug).isDirectory()\n    console.log(isDirectory, 'isDirctory')\n    if (!isDirectory) {\n        fileContents = fs.readFileSync(slug, 'utf8')\n    }\n    let items = {}\n    if (suffix === '.md') {\n        const {data, content} = matter(fileContents)\n        // Ensure only the minimal needed data is exposed\n        fields.forEach(field => {\n            if (field === 'slug') {\n                items[field] = realSlug\n            }\n            if (field === 'content') {\n                items[field] = content\n            }\n\n            if (data[field]) {\n                items[field] = data[field]\n            }\n        })\n    } else {\n        //返回js文件内容\n\n        items.slug = slug\n        items.title = slug\n        // items.date = new Date()\n        console.log(fileContents)\n        const highlightedCode =\n            hljs.highlightAuto(fileContents).value\n        items.content = highlightedCode\n\n    }\n\n    return items\n}\n\nexport function getAllPosts(fields = []) {\n    const {data_strutures, leetcode} = getPostSlugs()\n    // console.log(data_strutures, leetcode, 68)\n    const posts1 = data_strutures\n        .map(slug => getPostBySlug(slug, fields))\n        // sort posts by date in descending order\n        .sort((post1, post2) => (post1.date > post2.date ? '-1' : '1'))\n    const posts2 = leetcode\n        .map(item => getPostBySlug(item, fields))\n        .sort((post1, post2) => (post1.date > post2.date ? '-1' : '1'))\n    return {posts1, posts2}\n}\n\n"]},"metadata":{},"sourceType":"module"}