{"pageProps":{"post":{"date":"2021 / 3 / 1","slug":"112.路径总和.js","content":"<pre> <code class=\"hljs\" ><span class=\"hljs-comment\">/*\n给定一个二叉树和一个目标和，判断该树中是否存在从根结点到叶子结点的路径，这条路径上所有结点值相加等于目标和。\n说明: 叶子节点是指没有子节点的节点。\n思路：一个树从根结点到叶子结点的所有路径是确定的，所以用迭代的方式找到所有的路径，在找到一条路径所有结点相加等于目标和就停止查找。\n有几个叶子结点就有几条路径\n*/</span>\n\n\n<span class=\"hljs-comment\">/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-constructor\">TreeNode(<span class=\"hljs-params\">val</span>)</span> {\n    this.<span class=\"hljs-keyword\">val</span> = <span class=\"hljs-keyword\">val</span>;\n    this.left = this.right = null;\n}\n\n<span class=\"hljs-comment\">/**\n * @param {TreeNode} root\n * @param {number} sum\n * @return {boolean}\n */</span>\n<span class=\"hljs-comment\">// 思路：利用递归，判断到叶子结点，判断传入的sum是否和叶子结点的val相等</span>\nvar hasPathSum = <span class=\"hljs-keyword\">function</span> (root, sum) {\n    <span class=\"hljs-keyword\">if</span> (!root) return <span class=\"hljs-literal\">false</span>\n\n    <span class=\"hljs-keyword\">if</span> (!root.left<span class=\"hljs-operator\"> &amp;&amp; </span>!root.right) {\n        return root.<span class=\"hljs-keyword\">val</span><span class=\"hljs-operator\"> === </span>sum\n    }\n\n    return has<span class=\"hljs-constructor\">PathSum(<span class=\"hljs-params\">root</span>.<span class=\"hljs-params\">left</span>, <span class=\"hljs-params\">sum</span> - <span class=\"hljs-params\">root</span>.<span class=\"hljs-params\">val</span>)</span><span class=\"hljs-operator\"> || </span>has<span class=\"hljs-constructor\">PathSum(<span class=\"hljs-params\">root</span>.<span class=\"hljs-params\">right</span>, <span class=\"hljs-params\">sum</span> - <span class=\"hljs-params\">root</span>.<span class=\"hljs-params\">val</span>)</span>\n};\n\n<span class=\"hljs-comment\">/**\n * @param {TreeNode} root\n * @param {number} sum\n * @return {boolean}\n */</span>\n<span class=\"hljs-comment\">//利用迭代，利用栈保存读入的结点和剩余需要满足的sum</span>\n<span class=\"hljs-comment\">//栈中存放的是要找的结点的 记录，每次都是从栈中pop出一个结点，把该结点的子结点，和差满足sum的值cha都加入栈，然后迭代。如果抛出的结点是叶子结点，且cha===0则满足条件</span>\n<span class=\"hljs-keyword\">function</span> has<span class=\"hljs-constructor\">PathSum2(<span class=\"hljs-params\">root</span>, <span class=\"hljs-params\">sum</span>)</span> {\n    <span class=\"hljs-keyword\">if</span> (!root) return <span class=\"hljs-literal\">false</span>\n\n    <span class=\"hljs-comment\">//初始化 栈</span>\n    <span class=\"hljs-keyword\">let</span> stack = <span class=\"hljs-literal\">[{<span class=\"hljs-identifier\">node</span>: <span class=\"hljs-identifier\">root</span>, <span class=\"hljs-identifier\">cha</span>: <span class=\"hljs-identifier\">sum</span> - <span class=\"hljs-identifier\">root</span>.<span class=\"hljs-identifier\">val</span>}]</span>\n\n    <span class=\"hljs-keyword\">while</span> (stack.length &gt; <span class=\"hljs-number\">0</span>) {\n\n        <span class=\"hljs-keyword\">let</span> {node, cha} = stack.pop<span class=\"hljs-literal\">()</span>\n\n        <span class=\"hljs-keyword\">if</span> (!node.left<span class=\"hljs-operator\"> &amp;&amp; </span>!node.right) {\n            <span class=\"hljs-keyword\">if</span> (cha<span class=\"hljs-operator\"> === </span><span class=\"hljs-number\">0</span>) return <span class=\"hljs-literal\">true</span>  <span class=\"hljs-comment\">//叶子结点，且到叶子结点，正好等于目标值</span>\n        }\n\n        <span class=\"hljs-keyword\">if</span> (node.right) {\n            <span class=\"hljs-keyword\">let</span> right_node = {node: node.right, cha: cha - node.right.<span class=\"hljs-keyword\">val</span>}\n            stack.push(right_node)\n        }\n        <span class=\"hljs-keyword\">if</span> (node.left) {\n            <span class=\"hljs-keyword\">let</span> left_node = {node: node.left, cha: cha - node.left.<span class=\"hljs-keyword\">val</span>}\n            stack.push(left_node)\n        }\n    }\n    return <span class=\"hljs-literal\">false</span>\n}\n\n\n<span class=\"hljs-keyword\">let</span> one = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">TreeNode(1)</span>;\n<span class=\"hljs-keyword\">let</span> two = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">TreeNode(2)</span>;\n<span class=\"hljs-keyword\">let</span> three = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">TreeNode(3)</span>;\n<span class=\"hljs-keyword\">let</span> four = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">TreeNode(4)</span>;\n<span class=\"hljs-keyword\">let</span> five = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">TreeNode(5)</span>\n<span class=\"hljs-keyword\">let</span> seven = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">TreeNode(7)</span>\n<span class=\"hljs-keyword\">let</span> eight = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">TreeNode(8)</span>\n<span class=\"hljs-keyword\">let</span> eleven = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">TreeNode(11)</span>\n<span class=\"hljs-keyword\">let</span> thirten = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">TreeNode(13)</span>\n<span class=\"hljs-keyword\">let</span> four_2 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">TreeNode(4)</span>\n\nfive.left = four\nfive.right = eight\nfour.left = eleven\neleven.left = seven\neleven.right = two\neight.left = thirten\neight.right = four_2\nfour_2.right = one\n\n<span class=\"hljs-keyword\">let</span> result = has<span class=\"hljs-constructor\">PathSum2(<span class=\"hljs-params\">five</span>, 18)</span>\nconsole.log(result)\n</code> </pre>"}},"__N_SSG":true}