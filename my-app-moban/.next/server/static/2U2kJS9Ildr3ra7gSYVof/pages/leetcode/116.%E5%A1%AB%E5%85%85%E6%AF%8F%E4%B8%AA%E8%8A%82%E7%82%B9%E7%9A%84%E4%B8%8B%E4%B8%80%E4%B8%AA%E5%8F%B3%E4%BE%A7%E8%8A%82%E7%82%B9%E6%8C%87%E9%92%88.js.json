{"pageProps":{"post":{"date":"2021 / 3 / 1","slug":"116.填充每个节点的下一个右侧节点指针.js","content":"<pre> <code class=\"hljs\" ><span class=\"hljs-comment\">/**\n * // Definition for a Node.\n *  */</span>\nfunction <span class=\"hljs-type\">Node</span>(val, <span class=\"hljs-keyword\">left</span>, <span class=\"hljs-keyword\">right</span>, next) {\n    this.val = val === undefined ? null : val;\n    this.<span class=\"hljs-keyword\">left</span> = <span class=\"hljs-keyword\">left</span> === undefined ? null : <span class=\"hljs-keyword\">left</span>;\n    this.<span class=\"hljs-keyword\">right</span> = <span class=\"hljs-keyword\">right</span> === undefined ? null : <span class=\"hljs-keyword\">right</span>;\n    this.next = next === undefined ? null : next;\n};\n\n<span class=\"hljs-comment\">//while 迭代法</span>\n<span class=\"hljs-comment\">/**\n * @param {Node} root\n * @return {Node}\n */</span>\n<span class=\"hljs-keyword\">var</span> connect = function (root) {\n\n    <span class=\"hljs-comment\">//因为是完美二叉树，所以没有子孩子的是最后一层树</span>\n    <span class=\"hljs-comment\">//递归的把每一层传入函数</span>\n\n    <span class=\"hljs-comment\">//遍历每一层的最左边的节点，要看自己这一层有没有next，要看上一层的父节点有没有next</span>\n    <span class=\"hljs-comment\">//由于子节点没有指向父节点的指针，所以传入父节点</span>\n\n\n    <span class=\"hljs-keyword\">if</span> (!root) <span class=\"hljs-keyword\">return</span> root\n\n    <span class=\"hljs-keyword\">let</span> line = root;\n  \n    <span class=\"hljs-keyword\">while</span> (line) {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-type\">Left</span> = line.<span class=\"hljs-keyword\">left</span>  <span class=\"hljs-comment\">//下一层的头</span>\n\n        <span class=\"hljs-keyword\">let</span> head = line;\n        <span class=\"hljs-keyword\">while</span> (head){\n            <span class=\"hljs-keyword\">if</span> (head.<span class=\"hljs-keyword\">left</span> &amp;&amp; head.<span class=\"hljs-keyword\">right</span>) {\n                head.<span class=\"hljs-keyword\">left</span>.next = head.<span class=\"hljs-keyword\">right</span>\n            }\n\n            <span class=\"hljs-keyword\">if</span> (head.next &amp;&amp; head.<span class=\"hljs-keyword\">right</span>) {   <span class=\"hljs-comment\">//因为已知是完美二叉树</span>\n                head.<span class=\"hljs-keyword\">right</span>.next = head.next.<span class=\"hljs-keyword\">left</span> <span class=\"hljs-comment\">//建立连接</span>\n            }\n            head = head.next\n        }\n        line = <span class=\"hljs-type\">Left</span>;\n    }\n    <span class=\"hljs-keyword\">return</span> root;\n\n};\n\n<span class=\"hljs-keyword\">let</span> one = new <span class=\"hljs-type\">Node</span>(<span class=\"hljs-number\">1</span>);\n<span class=\"hljs-keyword\">let</span> two = new <span class=\"hljs-type\">Node</span>(<span class=\"hljs-number\">2</span>);\n<span class=\"hljs-keyword\">let</span> three = new <span class=\"hljs-type\">Node</span>(<span class=\"hljs-number\">3</span>);\n<span class=\"hljs-keyword\">let</span> four = new <span class=\"hljs-type\">Node</span>(<span class=\"hljs-number\">4</span>);\n<span class=\"hljs-keyword\">let</span> five = new <span class=\"hljs-type\">Node</span>(<span class=\"hljs-number\">5</span>);\n<span class=\"hljs-keyword\">let</span> six = new <span class=\"hljs-type\">Node</span>(<span class=\"hljs-number\">6</span>);\n<span class=\"hljs-keyword\">let</span> seven = new <span class=\"hljs-type\">Node</span>(<span class=\"hljs-number\">7</span>);\none.<span class=\"hljs-keyword\">left</span> = two\none.<span class=\"hljs-keyword\">right</span> = three\ntwo.<span class=\"hljs-keyword\">left</span> = four\ntwo.<span class=\"hljs-keyword\">right</span> = five\nthree.<span class=\"hljs-keyword\">left</span> = six\nthree.<span class=\"hljs-keyword\">right</span> = seven\n\n\n<span class=\"hljs-comment\">// let result = connect(one)</span>\n<span class=\"hljs-comment\">// console.log(JSON.stringify(result, '', 4))</span>\n\n<span class=\"hljs-comment\">//测试： [-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13]</span>\n\n<span class=\"hljs-comment\">//广度优先遍历 法，利用队列记录每一层的节点</span>\n<span class=\"hljs-keyword\">let</span> connect2 = function (root){\n    <span class=\"hljs-keyword\">if</span>(!root) <span class=\"hljs-keyword\">return</span> root\n    <span class=\"hljs-keyword\">let</span> queue = []\n\n    queue.push(root)\n\n    <span class=\"hljs-keyword\">while</span>(queue.length){\n        <span class=\"hljs-keyword\">let</span> len = queue.length\n\n        <span class=\"hljs-comment\">//一层</span>\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i&lt; len; i++){\n            <span class=\"hljs-keyword\">let</span> node = queue.shift()\n            <span class=\"hljs-keyword\">if</span>(i === len -<span class=\"hljs-number\">1</span>){    <span class=\"hljs-comment\">//达到这一层的结尾</span>\n               node.next = null\n            }<span class=\"hljs-keyword\">else</span> {\n                node.next = queue[<span class=\"hljs-number\">0</span>]     <span class=\"hljs-comment\">//同一层的节点保持关系</span>\n            }\n            \n            <span class=\"hljs-keyword\">if</span>(node.<span class=\"hljs-keyword\">left</span>){\n                queue.push(node.<span class=\"hljs-keyword\">left</span>)\n            } \n            <span class=\"hljs-keyword\">if</span>(node.<span class=\"hljs-keyword\">right</span>){\n                queue.push(node.<span class=\"hljs-keyword\">right</span>)\n            }\n        }\n\n    }\n    <span class=\"hljs-keyword\">return</span> root\n}\n\n<span class=\"hljs-keyword\">let</span> result2 = connect2(one);\n\nconsole.log(<span class=\"hljs-type\">JSON</span>.stringify(result2, '', <span class=\"hljs-number\">4</span>))\n\n<span class=\"hljs-comment\">//递归写法，将两棵树连接</span>\n\n<span class=\"hljs-keyword\">let</span> connect3 = function (root){\n    <span class=\"hljs-keyword\">if</span>(!root) <span class=\"hljs-keyword\">return</span> root\n\n    help(root.<span class=\"hljs-keyword\">left</span>, root.<span class=\"hljs-keyword\">right</span>)\n    <span class=\"hljs-keyword\">return</span> root;\n\n    function help(<span class=\"hljs-keyword\">left</span>, <span class=\"hljs-keyword\">right</span>){\n        <span class=\"hljs-keyword\">if</span>(!<span class=\"hljs-keyword\">left</span> || !<span class=\"hljs-keyword\">right</span>) <span class=\"hljs-keyword\">return</span> ;\n\n        <span class=\"hljs-keyword\">left</span>.next = <span class=\"hljs-keyword\">right</span>\n        help(<span class=\"hljs-keyword\">left</span>.<span class=\"hljs-keyword\">left</span>,<span class=\"hljs-keyword\">left</span>.<span class=\"hljs-keyword\">right</span>) <span class=\"hljs-comment\">//因为已知是完美二叉树了，所以一定有右节点 </span>\n        help(<span class=\"hljs-keyword\">left</span>.<span class=\"hljs-keyword\">right</span>,<span class=\"hljs-keyword\">right</span>.<span class=\"hljs-keyword\">left</span>)  <span class=\"hljs-comment\">//同上，已知完美二叉树</span>\n        help(<span class=\"hljs-keyword\">right</span>.<span class=\"hljs-keyword\">left</span>, <span class=\"hljs-keyword\">right</span>.<span class=\"hljs-keyword\">right</span>)  <span class=\"hljs-comment\">//同上，已知完美二叉树</span>\n    }\n}\n\n</code> </pre>"}},"__N_SSG":true}