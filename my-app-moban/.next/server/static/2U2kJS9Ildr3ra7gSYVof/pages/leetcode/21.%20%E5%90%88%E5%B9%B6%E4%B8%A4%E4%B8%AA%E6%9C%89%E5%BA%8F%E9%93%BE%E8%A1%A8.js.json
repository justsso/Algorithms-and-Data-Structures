{"pageProps":{"post":{"date":"2021 / 3 / 1","slug":"21. 合并两个有序链表.js","content":"<pre> <code class=\"hljs\" ><span class=\"hljs-regexp\">//</span>将两个升序链表合并为一个新的升序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 \n<span class=\"hljs-regexp\">//</span>\n<span class=\"hljs-regexp\">//</span> 示例：\n<span class=\"hljs-regexp\">//</span>\n<span class=\"hljs-regexp\">//</span> 输入：<span class=\"hljs-number\">1</span>-&gt;<span class=\"hljs-number\">2</span>-&gt;<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">1</span>-&gt;<span class=\"hljs-number\">3</span>-&gt;<span class=\"hljs-number\">4</span>\n<span class=\"hljs-regexp\">//</span> 输出：<span class=\"hljs-number\">1</span>-&gt;<span class=\"hljs-number\">1</span>-&gt;<span class=\"hljs-number\">2</span>-&gt;<span class=\"hljs-number\">3</span>-&gt;<span class=\"hljs-number\">4</span>-&gt;<span class=\"hljs-number\">4</span>\n<span class=\"hljs-regexp\">//</span>\n<span class=\"hljs-regexp\">//</span> 来源：力扣（LeetCode）\n<span class=\"hljs-regexp\">//</span> 链接：https:<span class=\"hljs-regexp\">//</span>leetcode-cn.com<span class=\"hljs-regexp\">/problems/m</span>erge-two-sorted-lists\n<span class=\"hljs-regexp\">//</span> 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。\n\n\n/**\n * Definition <span class=\"hljs-keyword\">for</span> singly-linked list.\n * <span class=\"hljs-keyword\">function</span> ListNode(val) {\n *     this.val = val;\n *     this.<span class=\"hljs-keyword\">next</span> = null;\n * }\n */\n<span class=\"hljs-keyword\">function</span> ListNode(val) {\n    this.val = val;\n    this.<span class=\"hljs-keyword\">next</span> = null;\n}\n\n/**\n * @param {ListNode} l1\n * @param {ListNode} l2\n * @return {ListNode}\n */\nvar mergeTwoLists = <span class=\"hljs-keyword\">function</span> (l1, l2) {\n    let myHead = new ListNode(null)\n\n    let cur = myHead\n    <span class=\"hljs-keyword\">while</span> (l1 &amp;&amp; l2) {\n        <span class=\"hljs-keyword\">if</span> (l1.val &lt; l2.val) {\n            cur.<span class=\"hljs-keyword\">next</span> = l1\n            l1 = l1.<span class=\"hljs-keyword\">next</span>\n        } <span class=\"hljs-keyword\">else</span> {\n            cur.<span class=\"hljs-keyword\">next</span> = l2;\n            l2 = l2.<span class=\"hljs-keyword\">next</span>\n        }\n        cur = cur.<span class=\"hljs-keyword\">next</span>\n    }\n\n    <span class=\"hljs-keyword\">if</span> (l1) {\n        cur.<span class=\"hljs-keyword\">next</span> = l1\n    }\n    <span class=\"hljs-keyword\">if</span> (l2) {\n        cur.<span class=\"hljs-keyword\">next</span> = l2\n    }\n    return myHead.<span class=\"hljs-keyword\">next</span>\n};\n</code> </pre>"}},"__N_SSG":true}