{"pageProps":{"post":{"date":"2021 / 3 / 1","slug":"142. 环形链表 II.js","content":"<pre> <code class=\"hljs\" >//给定一个链表，返回链表开始入环的第一个节点。 如果链表无环，则返回 null。\n/**\n * Definition <span class=\"hljs-keyword\">for</span> singly-linked list.\n * <span class=\"hljs-keyword\">function</span> ListNode(val) {\n *     this.val = val;\n *     this.<span class=\"hljs-keyword\">next</span> = null;\n * }\n */\n\n/**\n * @param {ListNode}<span class=\"hljs-built_in\"> head</span>\n * @<span class=\"hljs-keyword\">return</span> {ListNode}\n */\n\n//使用Map方法\nvar detectCycle = <span class=\"hljs-keyword\">function</span> <span class=\"hljs-built_in\">(head</span>) {\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">!head</span>) <span class=\"hljs-keyword\">return</span> null;\n    <span class=\"hljs-keyword\">let</span> m = new Map()\n    while <span class=\"hljs-built_in\">(head</span>) {\n        <span class=\"hljs-keyword\">if</span> (m.has<span class=\"hljs-built_in\">(head</span>)) {\n            //有环，且这个结点就是入环的第一个点\n            <span class=\"hljs-keyword\">return</span><span class=\"hljs-built_in\"> head</span>\n        } <span class=\"hljs-keyword\">else</span> {\n            m.set<span class=\"hljs-built_in\">(head</span>, <span class=\"hljs-number\">1</span>)\n           <span class=\"hljs-built_in\"> head</span> =<span class=\"hljs-built_in\"> head</span>.<span class=\"hljs-keyword\">next</span>\n        }\n    }\n    <span class=\"hljs-keyword\">return</span> null\n};\n\n//进阶，不使用额外空间；使用一二步进法，以相交的点为出发点，同时<span class=\"hljs-built_in\">以head</span>为触发点，遍历单链表，相交的结点就是入环的第一个结点\n//可以画图来表示\n\n/**\n * @param {ListNode}<span class=\"hljs-built_in\"> head</span>\n * @<span class=\"hljs-keyword\">return</span> {ListNode}\n */\n\n<span class=\"hljs-keyword\">let</span> detectCycle2 = <span class=\"hljs-keyword\">function</span> <span class=\"hljs-built_in\">(head</span>) {\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">!head</span>) <span class=\"hljs-keyword\">return</span> null\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">!head</span>.<span class=\"hljs-keyword\">next</span>) <span class=\"hljs-keyword\">return</span> null\n\n    <span class=\"hljs-keyword\">let</span> fast =<span class=\"hljs-built_in\"> head</span>.<span class=\"hljs-keyword\">next</span>.<span class=\"hljs-keyword\">next</span>, slow =<span class=\"hljs-built_in\"> head</span>.<span class=\"hljs-keyword\">next</span>;\n\n    while (fast &amp;&amp; slow) {\n        <span class=\"hljs-keyword\">if</span> (fast === slow) {\n            // 找到<span class=\"hljs-string\">\"一二步进法\"</span>的相交点\n\n            //找到<span class=\"hljs-string\">\"一二步进法\"</span>相交点之后，再以两条路去遍历链表，去找入环的第一个结点\n            while <span class=\"hljs-built_in\">(head</span> !== fast) {\n                <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">(head</span>.<span class=\"hljs-keyword\">next</span> &amp;&amp; fast.<span class=\"hljs-keyword\">next</span>) {\n                   <span class=\"hljs-built_in\"> head</span> =<span class=\"hljs-built_in\"> head</span>.<span class=\"hljs-keyword\">next</span>\n                    fast = fast.<span class=\"hljs-keyword\">next</span>\n                }\n            }\n            <span class=\"hljs-keyword\">return</span> fast\n\n        } <span class=\"hljs-keyword\">else</span> {\n            <span class=\"hljs-keyword\">if</span> (fast.<span class=\"hljs-keyword\">next</span> &amp;&amp; fast.<span class=\"hljs-keyword\">next</span>.<span class=\"hljs-keyword\">next</span> &amp;&amp; slow.<span class=\"hljs-keyword\">next</span>) {\n                fast = fast.<span class=\"hljs-keyword\">next</span>.<span class=\"hljs-keyword\">next</span>\n                slow = slow.<span class=\"hljs-keyword\">next</span>\n            } <span class=\"hljs-keyword\">else</span> {\n                //说明没有环\n                <span class=\"hljs-keyword\">return</span> null\n            }\n        }\n    }\n    <span class=\"hljs-keyword\">return</span> null\n}\n</code> </pre>"}},"__N_SSG":true}