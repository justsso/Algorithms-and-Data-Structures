{"pageProps":{"post":{"date":"2021 / 3 / 1","slug":"模拟ES6之map.js","content":"<pre> <code class=\"hljs\" >//ES6 的<span class=\"hljs-keyword\">map</span>插入有顺序，这是跟普通<span class=\"hljs-keyword\">map</span>不一样的点，所以模拟ES6的<span class=\"hljs-keyword\">map</span>时，用了链表维持这种顺序\nclass ListNode {\n    constructor<span class=\"hljs-built_in\">(key</span>, <span class=\"hljs-keyword\">value</span>) {\n        this<span class=\"hljs-built_in\">.key</span> =<span class=\"hljs-built_in\"> key</span>;\n        this.<span class=\"hljs-keyword\">value</span> = <span class=\"hljs-keyword\">value</span>;\n        this.<span class=\"hljs-keyword\">next</span> = null;  //记录插入顺序\n        this.<span class=\"hljs-literal\">ne</span> = null; //记录Hash碰撞后的结点\n    }\n}\n\n<span class=\"hljs-keyword\">function</span> myMap() {\n    this.init();\n}\n\nmyMap.prototype.init = <span class=\"hljs-keyword\">function</span> () {\n    this<span class=\"hljs-built_in\">.collection</span> = new Array(<span class=\"hljs-number\">6</span>)  //<span class=\"hljs-keyword\">map</span>底层用了hash算法。加入使<span class=\"hljs-built_in\">用collection</span>容器存放<span class=\"hljs-keyword\">map</span>中的数据\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; this<span class=\"hljs-built_in\">.collection</span>.length; i++) {\n        this<span class=\"hljs-built_in\">.collection</span>[i] = Object.create(null)\n        this<span class=\"hljs-built_in\">.collection</span>[i].<span class=\"hljs-literal\">ne</span> = null;\n        this<span class=\"hljs-built_in\">.collection</span>[i].<span class=\"hljs-keyword\">next</span> = null;\n    }\n    this.size = <span class=\"hljs-number\">0</span>\n    this<span class=\"hljs-built_in\">.head</span> = null; //头指针，总是指向第一个\n    this<span class=\"hljs-built_in\">.tail</span> = null;  //尾指针，总是指向最后一个\n}\n\n//插入或更<span class=\"hljs-built_in\">新key</span>结点\nmyMap.prototype.set = <span class=\"hljs-keyword\">function</span> <span class=\"hljs-built_in\">(key</span>, <span class=\"hljs-keyword\">value</span>) {\n    <span class=\"hljs-keyword\">let</span> index = this.hash<span class=\"hljs-built_in\">(key</span>)  //获取容器中的位置\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-type\">node</span> = this<span class=\"hljs-built_in\">.collection</span>[index]  //获得index位置处的对象\n    while (<span class=\"hljs-type\">node</span>.<span class=\"hljs-literal\">ne</span>) {\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-type\">node</span>.<span class=\"hljs-literal\">ne</span><span class=\"hljs-built_in\">.key</span> ===<span class=\"hljs-built_in\"> key</span>) {\n            <span class=\"hljs-type\">node</span>.<span class=\"hljs-literal\">ne</span>.<span class=\"hljs-keyword\">value</span> = <span class=\"hljs-keyword\">value</span>  //更新\n            <span class=\"hljs-keyword\">return</span> this  //注意返回当前对象this\n        } <span class=\"hljs-keyword\">else</span> {\n            <span class=\"hljs-type\">node</span> = <span class=\"hljs-type\">node</span>.<span class=\"hljs-literal\">ne</span>\n        }\n    }\n    //<span class=\"hljs-keyword\">map</span>中没有<span class=\"hljs-built_in\">该key</span>，就在链表尾部插入\n    <span class=\"hljs-keyword\">let</span> new_node = new ListNode<span class=\"hljs-built_in\">(key</span>, <span class=\"hljs-keyword\">value</span>)\n    <span class=\"hljs-type\">node</span>.<span class=\"hljs-literal\">ne</span> = new_node\n    <span class=\"hljs-keyword\">if</span> (!this<span class=\"hljs-built_in\">.tail</span>) {\n        this<span class=\"hljs-built_in\">.tail</span> = new_node\n    }\n\n    <span class=\"hljs-keyword\">if</span> (!this<span class=\"hljs-built_in\">.head</span>) {\n        this<span class=\"hljs-built_in\">.head</span> = new_node  //如果是第一个结点，头指针指向它\n    }\n\n    this<span class=\"hljs-built_in\">.tail</span>.<span class=\"hljs-keyword\">next</span> = new_node  //尾指针\n    this<span class=\"hljs-built_in\">.tail</span> = new_node\n\n    this.size++\n    <span class=\"hljs-keyword\">return</span> this  //注意返回当前对象this\n\n}\n\n//获<span class=\"hljs-built_in\">取key</span>结点的值\nmyMap.prototype.get = <span class=\"hljs-keyword\">function</span> <span class=\"hljs-built_in\">(key</span>) {\n    <span class=\"hljs-keyword\">let</span> index = this.hash<span class=\"hljs-built_in\">(key</span>)\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-type\">node</span> = this<span class=\"hljs-built_in\">.collection</span>[index] //获取容器相应位置处的对象\n    while (<span class=\"hljs-type\">node</span>) {\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-type\">node</span><span class=\"hljs-built_in\">.key</span> ===<span class=\"hljs-built_in\"> key</span>) {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-type\">node</span>.<span class=\"hljs-keyword\">value</span>\n        } <span class=\"hljs-keyword\">else</span> {\n            <span class=\"hljs-type\">node</span> = <span class=\"hljs-type\">node</span>.<span class=\"hljs-literal\">ne</span>\n        }\n    }\n    <span class=\"hljs-keyword\">return</span> undefined\n}\n\n//删<span class=\"hljs-built_in\">掉key</span>结点\nmyMap.prototype.<span class=\"hljs-keyword\">delete</span> = <span class=\"hljs-keyword\">function</span> <span class=\"hljs-built_in\">(key</span>) {\n    <span class=\"hljs-keyword\">if</span> (!this<span class=\"hljs-built_in\">.head</span>) {\n        <span class=\"hljs-keyword\">return</span><span class=\"hljs-built_in\"> false</span>\n    }\n\n    //从容器中删除\n    <span class=\"hljs-keyword\">let</span> index = this.hash<span class=\"hljs-built_in\">(key</span>)\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-type\">node</span> = this<span class=\"hljs-built_in\">.collection</span>[index]\n    <span class=\"hljs-keyword\">let</span> pre = null;\n    while (<span class=\"hljs-type\">node</span>.<span class=\"hljs-literal\">ne</span>) {\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-type\">node</span>.<span class=\"hljs-literal\">ne</span><span class=\"hljs-built_in\">.key</span> ===<span class=\"hljs-built_in\"> key</span>) {\n            <span class=\"hljs-keyword\">let</span> _prev = <span class=\"hljs-type\">node</span>; //从链表中删除，需要前置结点\n            <span class=\"hljs-keyword\">let</span> _<span class=\"hljs-type\">node</span> = <span class=\"hljs-type\">node</span>.<span class=\"hljs-literal\">ne</span> //保存要删除的结点\n            _prev.<span class=\"hljs-literal\">ne</span> = <span class=\"hljs-type\">node</span>.<span class=\"hljs-literal\">ne</span>.<span class=\"hljs-literal\">ne</span>//从容器中删除，前置结点的指针指向要删除结点的指针\n            //从链表中删除\n            <span class=\"hljs-keyword\">if</span> (this<span class=\"hljs-built_in\">.head</span> === _<span class=\"hljs-type\">node</span>) { //如果要删除的结点是头结点\n                this<span class=\"hljs-built_in\">.head</span> = _<span class=\"hljs-type\">node</span>.<span class=\"hljs-keyword\">next</span>;\n            } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (this<span class=\"hljs-built_in\">.tail</span> === _<span class=\"hljs-type\">node</span>) { //如果要删除的结点时尾结点\n                this<span class=\"hljs-built_in\">.tail</span> = _prev; //将尾指针指为前置结点\n                _prev.<span class=\"hljs-keyword\">next</span> = null; //将前置结点的指针置为空\n            } <span class=\"hljs-keyword\">else</span> {\n                <span class=\"hljs-keyword\">let</span> cur = this<span class=\"hljs-built_in\">.head</span>;\n                while (cur) {\n                    <span class=\"hljs-keyword\">if</span> (cur<span class=\"hljs-built_in\">.key</span> !==<span class=\"hljs-built_in\"> key</span>) {\n                        pre = cur;\n                        cur = cur.<span class=\"hljs-keyword\">next</span>;\n                    } <span class=\"hljs-keyword\">else</span> {\n                        break\n                    }\n                }\n                pre.<span class=\"hljs-keyword\">next</span> = cur.<span class=\"hljs-keyword\">next</span>\n            }\n            this.size--\n            <span class=\"hljs-keyword\">return</span><span class=\"hljs-built_in\"> true</span>;\n        } <span class=\"hljs-keyword\">else</span> {\n            <span class=\"hljs-type\">node</span> = <span class=\"hljs-type\">node</span>.<span class=\"hljs-literal\">ne</span>\n        }\n    }\n    <span class=\"hljs-keyword\">return</span><span class=\"hljs-built_in\"> false</span>\n}\n\nmyMap.prototype.has = <span class=\"hljs-keyword\">function</span> <span class=\"hljs-built_in\">(key</span>) {\n    <span class=\"hljs-keyword\">let</span> index = this.hash<span class=\"hljs-built_in\">(key</span>)\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-type\">node</span> = this<span class=\"hljs-built_in\">.collection</span>[index]\n    while (<span class=\"hljs-type\">node</span>.<span class=\"hljs-literal\">ne</span>) {\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-type\">node</span>.<span class=\"hljs-literal\">ne</span><span class=\"hljs-built_in\">.key</span> ===<span class=\"hljs-built_in\"> key</span>) {\n            <span class=\"hljs-keyword\">return</span><span class=\"hljs-built_in\"> true</span>\n        } <span class=\"hljs-keyword\">else</span> {\n            <span class=\"hljs-type\">node</span> = <span class=\"hljs-type\">node</span>.<span class=\"hljs-literal\">ne</span>\n        }\n    }\n    <span class=\"hljs-keyword\">return</span><span class=\"hljs-built_in\"> false</span>\n}\n\n//获取某个结点\nmyMap.prototype.getNode = <span class=\"hljs-keyword\">function</span> <span class=\"hljs-built_in\">(key</span>) {\n    <span class=\"hljs-keyword\">let</span> index = this.hash<span class=\"hljs-built_in\">(key</span>)\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-type\">node</span> = this<span class=\"hljs-built_in\">.collection</span>[index]\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-type\">node</span> === undefined) <span class=\"hljs-keyword\">return</span> null\n    while (<span class=\"hljs-type\">node</span>.<span class=\"hljs-literal\">ne</span>) {\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-type\">node</span><span class=\"hljs-built_in\">.key</span> ===<span class=\"hljs-built_in\"> key</span>) {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-type\">node</span>\n        } <span class=\"hljs-keyword\">else</span> {\n            <span class=\"hljs-type\">node</span> = <span class=\"hljs-type\">node</span>.<span class=\"hljs-literal\">ne</span>\n        }\n    }\n    <span class=\"hljs-keyword\">return</span> null\n}\n\n//返回键名的遍历器\nmyMap.prototype.keys = <span class=\"hljs-keyword\">function</span>* () {\n    <span class=\"hljs-keyword\">let</span><span class=\"hljs-built_in\"> head</span> = this<span class=\"hljs-built_in\">.head</span>\n    // 遍历链表，把链表中所有Key放入生成器中\n    while <span class=\"hljs-built_in\">(head</span>) {\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">(head</span><span class=\"hljs-built_in\">.key</span>) {\n            yield<span class=\"hljs-built_in\"> head</span><span class=\"hljs-built_in\">.key</span>\n        }\n       <span class=\"hljs-built_in\"> head</span> =<span class=\"hljs-built_in\"> head</span>.<span class=\"hljs-keyword\">next</span>\n    }\n}\n\n//返回键值的遍历器\nmyMap.prototype.values = <span class=\"hljs-keyword\">function</span>* () {\n    <span class=\"hljs-keyword\">let</span><span class=\"hljs-built_in\"> head</span> = this<span class=\"hljs-built_in\">.head</span>;\n    while <span class=\"hljs-built_in\">(head</span>) {\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">(head</span>.<span class=\"hljs-keyword\">value</span>) {\n            yield<span class=\"hljs-built_in\"> head</span>.<span class=\"hljs-keyword\">value</span>\n        }\n       <span class=\"hljs-built_in\"> head</span> =<span class=\"hljs-built_in\"> head</span>.<span class=\"hljs-keyword\">next</span>\n    }\n}\n\n//返回所有成员 遍历器\nmyMap.prototype.entries = <span class=\"hljs-keyword\">function</span>* () {\n    <span class=\"hljs-keyword\">let</span><span class=\"hljs-built_in\"> head</span> = this<span class=\"hljs-built_in\">.head</span>;\n    while <span class=\"hljs-built_in\">(head</span>) {\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">(head</span><span class=\"hljs-built_in\">.key</span>) {\n            yield <span class=\"hljs-built_in\">[head</span><span class=\"hljs-built_in\">.key</span>,<span class=\"hljs-built_in\"> head</span>.<span class=\"hljs-keyword\">value</span>]\n        }\n       <span class=\"hljs-built_in\"> head</span> =<span class=\"hljs-built_in\"> head</span>.<span class=\"hljs-keyword\">next</span>\n    }\n}\nmyMap.prototype[Symbol.iterator] = myMap.prototype.entries  //默认遍历器接口。<span class=\"hljs-keyword\">for</span> <span class=\"hljs-keyword\">of</span>使用\n\n//返回Map的所有成员，接受一个函数作为第一个参数，第二个参数是thisArg 如果省略了 thisArg 参数，或者其值为 null 或 undefined，this 则指向全局对象。\nmyMap.prototype.forEach = <span class=\"hljs-keyword\">function</span> (callbackFn, thisArg) {\n    <span class=\"hljs-keyword\">let</span><span class=\"hljs-built_in\"> head</span> = this<span class=\"hljs-built_in\">.head</span>\n    while <span class=\"hljs-built_in\">(head</span>) {\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">(head</span><span class=\"hljs-built_in\">.key</span>) {\n            callbackFn.call(thisArg,<span class=\"hljs-built_in\"> head</span><span class=\"hljs-built_in\">.key</span>,<span class=\"hljs-built_in\"> head</span>.<span class=\"hljs-keyword\">value</span>, this)\n           <span class=\"hljs-built_in\"> head</span> =<span class=\"hljs-built_in\"> head</span>.<span class=\"hljs-keyword\">next</span>\n        }\n    }\n}\n\nmyMap.prototype.clear = <span class=\"hljs-keyword\">function</span> () {\n    this.init()\n}\n/**\n * @param  any<span class=\"hljs-built_in\"> key</span>\n * @<span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">{number</span>}\n */\n\n//Hash 方法，Hash的速算法我自己模拟一个，真正实践中的Hash算法肯定十分复杂\nmyMap.prototype.hash = <span class=\"hljs-keyword\">function</span> <span class=\"hljs-built_in\">(key</span>) {\n    <span class=\"hljs-keyword\">let</span> index = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">if</span> (typeof<span class=\"hljs-built_in\"> key</span> === <span class=\"hljs-string\">'string'</span>) {\n        //字符串的话取前<span class=\"hljs-number\">10</span>位，也没必要全部遍历完字符串，会影响性能、计算时间\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">10</span>; i++) {\n            index += isNaN<span class=\"hljs-built_in\">(key</span>.charCodeAt(i)) ? <span class=\"hljs-number\">0</span> :<span class=\"hljs-built_in\"> key</span>.charCodeAt(i)\n        }\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (typeof<span class=\"hljs-built_in\"> key</span> === <span class=\"hljs-string\">'number'</span>) {\n        index = isNaN<span class=\"hljs-built_in\">(key</span>) ? this<span class=\"hljs-built_in\">.collection</span>.length - <span class=\"hljs-number\">1</span> :<span class=\"hljs-built_in\"> key</span> % this<span class=\"hljs-built_in\">.collection</span>.length\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (typeof<span class=\"hljs-built_in\"> key</span> === <span class=\"hljs-string\">'object'</span>) {\n        //    如果传入的是一个对象作为键，es6中的Map，底层Hash算法一定跟它的内存地址有关，因为取值时，比较的是是否是同一个引用。就算给了一个字面量相同的值，也不能取到值，必须试试引用相同的值才能取到\n        //    这里我只能模<span class=\"hljs-built_in\">拟key</span>为对象时，经Hash算法得到的都是index=<span class=\"hljs-number\">0</span>了\n        index = <span class=\"hljs-number\">0</span>\n\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (typeof<span class=\"hljs-built_in\"> key</span> === <span class=\"hljs-string\">'undefined'</span>) {\n        index = <span class=\"hljs-number\">1</span>\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (typeof<span class=\"hljs-built_in\"> key</span> === <span class=\"hljs-string\">'boolean'</span>) {\n        index = <span class=\"hljs-number\">2</span>\n    }\n    <span class=\"hljs-keyword\">return</span> index % this<span class=\"hljs-built_in\">.collection</span>.length\n}\n\n<span class=\"hljs-keyword\">let</span> m = new myMap();\nm.set(<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-number\">1</span>).set(<span class=\"hljs-string\">'b'</span>, <span class=\"hljs-number\">2</span>)\nconsole.log(m.get(<span class=\"hljs-string\">'a'</span>), m.get(<span class=\"hljs-string\">'b'</span>))\n<span class=\"hljs-keyword\">let</span> obj = <span class=\"hljs-built_in\">{name</span>: <span class=\"hljs-string\">'lolita'</span>}\n<span class=\"hljs-keyword\">let</span> obj2 = <span class=\"hljs-built_in\">{name</span>: <span class=\"hljs-string\">'obj2'</span>}\n// console.log(JSON.stringify(m, null, <span class=\"hljs-number\">4</span>))\n\nm.set(obj, <span class=\"hljs-string\">'obj'</span>)\nm.set(obj2, <span class=\"hljs-string\">'obj2'</span>)\n// console.log(JSON.stringify(m, null, <span class=\"hljs-number\">4</span>))\nconsole.log(m.get(obj))\nconsole.log(m.size)\n// console.log(m.get(obj2))\n// console.log(m.<span class=\"hljs-keyword\">delete</span>(<span class=\"hljs-string\">'a'</span>))\n// console.log(m.has(<span class=\"hljs-string\">'a'</span>))\nconsole.log(m.<span class=\"hljs-keyword\">delete</span>(<span class=\"hljs-string\">'a'</span>))\nconsole.log(m.<span class=\"hljs-keyword\">delete</span>(<span class=\"hljs-string\">'a'</span>))\n\nconsole.log(m.<span class=\"hljs-keyword\">delete</span>(obj))\nconsole.log(m.get(obj2))\n// console.log(JSON.stringify(m, null, <span class=\"hljs-number\">4</span>))\n// console.log(m.<span class=\"hljs-keyword\">delete</span>(obj2))\n// console.log(JSON.stringify(m, null, <span class=\"hljs-number\">4</span>))\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span><span class=\"hljs-built_in\"> key</span> <span class=\"hljs-keyword\">of</span> m.keys()) {\n    console.log(<span class=\"hljs-string\">'key:'</span>,<span class=\"hljs-built_in\"> key</span>)\n}\n//\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">value</span> <span class=\"hljs-keyword\">of</span> m.values()) {\n    console.log(<span class=\"hljs-string\">'value:'</span>, <span class=\"hljs-keyword\">value</span>)\n}\n//\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> <span class=\"hljs-type\">item</span> <span class=\"hljs-keyword\">of</span> m.entries()) {\n    console.log(<span class=\"hljs-type\">item</span>[<span class=\"hljs-number\">0</span>], <span class=\"hljs-type\">item</span>[<span class=\"hljs-number\">1</span>])\n}\n\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> <span class=\"hljs-built_in\">[key</span>, <span class=\"hljs-keyword\">value</span>] <span class=\"hljs-keyword\">of</span> m) {\n    console.log<span class=\"hljs-built_in\">(key</span>, <span class=\"hljs-keyword\">value</span>);\n}\n\n<span class=\"hljs-keyword\">let</span> ooo = <span class=\"hljs-built_in\">{name</span>: <span class=\"hljs-string\">'Jack'</span>}\nm.forEach(<span class=\"hljs-keyword\">function</span> <span class=\"hljs-built_in\">(key</span>, <span class=\"hljs-keyword\">value</span>, <span class=\"hljs-keyword\">map</span>) {\n    console.log(<span class=\"hljs-string\">\"key: %s, value: %s\"</span>,<span class=\"hljs-built_in\"> key</span>, <span class=\"hljs-keyword\">value</span>)\n    console.log(this)  //forEach第二个参数不写或者null或者undefined，this都会是全局对象\n}, ooo)\n// console.log(m.clear())\nm.set(<span class=\"hljs-literal\">NaN</span>, <span class=\"hljs-number\">1</span>)\nconsole.log(m.get((<span class=\"hljs-literal\">NaN</span>)))\n// console.log(arr.<span class=\"hljs-keyword\">next</span>())\n// console.log(arr.<span class=\"hljs-keyword\">next</span>())\n// console.log(arr.<span class=\"hljs-keyword\">next</span>())\n// console.log(arr.<span class=\"hljs-keyword\">next</span>())\n// console.log(arr.<span class=\"hljs-keyword\">next</span>())\n</code> </pre>"}},"__N_SSG":true}