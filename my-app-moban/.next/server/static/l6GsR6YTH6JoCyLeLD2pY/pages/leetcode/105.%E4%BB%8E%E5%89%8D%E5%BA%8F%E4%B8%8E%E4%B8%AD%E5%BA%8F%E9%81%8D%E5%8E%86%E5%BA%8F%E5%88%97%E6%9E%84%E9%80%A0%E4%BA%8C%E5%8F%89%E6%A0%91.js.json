{"pageProps":{"post":{"date":"2021 / 3 / 1","slug":"105.从前序与中序遍历序列构造二叉树.js","content":"<pre> <code class=\"hljs\" ><span class=\"hljs-comment\">/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */</span>\n<span class=\"hljs-comment\">//思路: 通过前序和中序递归的写出二叉树。</span>\n<span class=\"hljs-comment\">//前序序列的第一个结点永远是根结点，根节点在中序序列中位置mid，中序序列的左边是左子树，右边是右子树</span>\n<span class=\"hljs-comment\">//递归函数，有两个参数，中序遍历的左起点和右终点。闭区间</span>\n<span class=\"hljs-comment\">//先得到根结点，然后对左右子树进行遍历，传入0~mid-1, mid+1 inorder.length-1</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-constructor\">TreeNode(<span class=\"hljs-params\">val</span>)</span> {\n    this.<span class=\"hljs-keyword\">val</span> = <span class=\"hljs-keyword\">val</span>;\n    this.left = this.right = null;\n}\n\n<span class=\"hljs-comment\">/**\n * @param {number[]} preorder\n * @param {number[]} inorder\n * @return {TreeNode}\n */</span>\nvar buildTree = <span class=\"hljs-keyword\">function</span> (preorder, inorder) {\n\n    <span class=\"hljs-keyword\">if</span> (preorder.length<span class=\"hljs-operator\"> === </span><span class=\"hljs-number\">0</span><span class=\"hljs-operator\"> &amp;&amp; </span>inorder.length<span class=\"hljs-operator\"> === </span><span class=\"hljs-number\">0</span>) {\n        return null\n    }\n\n    <span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>, high = inorder.length - <span class=\"hljs-number\">1</span>, low = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">let</span> root = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">TreeNode(<span class=\"hljs-params\">preorder</span>[<span class=\"hljs-params\">i</span>])</span>\n    <span class=\"hljs-keyword\">let</span> mid = inorder.index<span class=\"hljs-constructor\">Of(<span class=\"hljs-params\">preorder</span>[<span class=\"hljs-params\">i</span>])</span> <span class=\"hljs-comment\">// 根据根结点，将中序序列 一分为二</span>\n\n    root.left = pinjie(low, mid - <span class=\"hljs-number\">1</span>) <span class=\"hljs-comment\">//中序序列的 左半部分是左子树</span>\n    root.right = pinjie(mid + <span class=\"hljs-number\">1</span>, high); <span class=\"hljs-comment\">//中序序列的 右半部分是右子树</span>\n\n    <span class=\"hljs-keyword\">function</span> pinjie(low, high) {\n        <span class=\"hljs-keyword\">if</span> (i &lt; preorder.length - <span class=\"hljs-number\">1</span>) {\n            <span class=\"hljs-keyword\">if</span> (low &gt; high) {\n                return null\n            }\n            <span class=\"hljs-keyword\">if</span> (low<span class=\"hljs-operator\"> === </span>high) {\n                <span class=\"hljs-comment\">//说明是叶子结点</span>\n                i++\n                return <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">TreeNode(<span class=\"hljs-params\">inorder</span>[<span class=\"hljs-params\">low</span>])</span>\n            }\n            <span class=\"hljs-keyword\">if</span> (low &lt; high) {\n                i++\n                <span class=\"hljs-keyword\">let</span> root1 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">TreeNode(<span class=\"hljs-params\">preorder</span>[<span class=\"hljs-params\">i</span>])</span>\n                <span class=\"hljs-keyword\">let</span> mid = inorder.index<span class=\"hljs-constructor\">Of(<span class=\"hljs-params\">preorder</span>[<span class=\"hljs-params\">i</span>])</span>\n                root1.left = pinjie(low, mid - <span class=\"hljs-number\">1</span>)\n                root1.right = pinjie(mid + <span class=\"hljs-number\">1</span>, high)\n                return root1\n            }\n        }<span class=\"hljs-keyword\">else</span>{\n            return  null\n        }\n    }\n\n    return root\n};\n<span class=\"hljs-keyword\">let</span> three = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">TreeNode(3)</span>\n<span class=\"hljs-keyword\">let</span> nine = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">TreeNode(9)</span>\n<span class=\"hljs-keyword\">let</span> two = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">TreeNode(20)</span>\n<span class=\"hljs-keyword\">let</span> five = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">TreeNode(15)</span>\n<span class=\"hljs-keyword\">let</span> seven = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">TreeNode(7)</span>\n\nthree.left = nine\nthree.right = two\ntwo.left = five\ntwo.right = seven\n\n<span class=\"hljs-keyword\">let</span> myTree = build<span class=\"hljs-constructor\">Tree([3, 9, 20, 15, 7], [9, 3, 15, 20, 7])</span>\n<span class=\"hljs-comment\">// let myTree = buildTree([1, 2, 3], [3, 2, 1])</span>\n<span class=\"hljs-comment\">// console.log(myTree)</span>\n</code> </pre>"}},"__N_SSG":true}