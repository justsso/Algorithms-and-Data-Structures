{"pageProps":{"post":{"date":"2021 / 3 / 1","slug":"206. 反转链表.js","content":"<pre> <code class=\"hljs\" ><span class=\"hljs-regexp\">//</span><span class=\"hljs-number\">206</span>. 反转链表\n<span class=\"hljs-regexp\">//</span>反转一个单链表。\n<span class=\"hljs-regexp\">//</span>\n<span class=\"hljs-regexp\">//</span> 示例:\n<span class=\"hljs-regexp\">//</span>\n<span class=\"hljs-regexp\">//</span> 输入: <span class=\"hljs-number\">1</span>-&gt;<span class=\"hljs-number\">2</span>-&gt;<span class=\"hljs-number\">3</span>-&gt;<span class=\"hljs-number\">4</span>-&gt;<span class=\"hljs-number\">5</span>-&gt;NULL\n<span class=\"hljs-regexp\">//</span> 输出: <span class=\"hljs-number\">5</span>-&gt;<span class=\"hljs-number\">4</span>-&gt;<span class=\"hljs-number\">3</span>-&gt;<span class=\"hljs-number\">2</span>-&gt;<span class=\"hljs-number\">1</span>-&gt;NULL\n<span class=\"hljs-regexp\">//</span> 进阶:\n<span class=\"hljs-regexp\">//</span> 你可以迭代或递归地反转链表。你能否用两种方法解决这道题？\n<span class=\"hljs-regexp\">//</span>\n<span class=\"hljs-regexp\">//</span> 来源：力扣（LeetCode）\n<span class=\"hljs-regexp\">//</span> 链接：https:<span class=\"hljs-regexp\">//</span>leetcode-cn.com<span class=\"hljs-regexp\">/problems/</span>reverse-linked-list\n<span class=\"hljs-regexp\">//</span> 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。\n/**\n * Definition <span class=\"hljs-keyword\">for</span> singly-linked list.\n * <span class=\"hljs-keyword\">function</span> ListNode(val) {\n *     this.val = val;\n *     this.<span class=\"hljs-keyword\">next</span> = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @return {ListNode}\n */\n<span class=\"hljs-keyword\">function</span> ListNode(val) {\n    this.val = val;\n    this.<span class=\"hljs-keyword\">next</span> = null;\n}\n\n<span class=\"hljs-regexp\">//</span>迭代法找，利用一个伪结点Null\nvar reverseList = <span class=\"hljs-keyword\">function</span> (head) {\n    let pre = null\n    let cur = head\n    <span class=\"hljs-keyword\">while</span> (cur) {\n        let <span class=\"hljs-keyword\">next</span> = cur.<span class=\"hljs-keyword\">next</span> <span class=\"hljs-regexp\">//</span>标记下一个结点<span class=\"hljs-keyword\">next</span>\n        cur.<span class=\"hljs-keyword\">next</span> = pre <span class=\"hljs-regexp\">//</span>将当前结点的<span class=\"hljs-keyword\">next</span>指向前一个结点pre\n        pre = cur   <span class=\"hljs-regexp\">//</span>当前结点cur当作前一个结点pre\n        cur = <span class=\"hljs-keyword\">next</span>  <span class=\"hljs-regexp\">//</span><span class=\"hljs-keyword\">next</span>结点变成当前结点cur\n    }\n\n    return pre ;\n};\n\nlet head = new ListNode(<span class=\"hljs-number\">1</span>);\nlet two = new ListNode(<span class=\"hljs-number\">2</span>);\nlet three = new ListNode(<span class=\"hljs-number\">3</span>);\n<span class=\"hljs-regexp\">//</span> head.<span class=\"hljs-keyword\">next</span> = two\n<span class=\"hljs-regexp\">//</span> two.<span class=\"hljs-keyword\">next</span> = three\n\nconsole.log(head)\nconsole.log(reverseList(head))\n</code> </pre>"}},"__N_SSG":true}