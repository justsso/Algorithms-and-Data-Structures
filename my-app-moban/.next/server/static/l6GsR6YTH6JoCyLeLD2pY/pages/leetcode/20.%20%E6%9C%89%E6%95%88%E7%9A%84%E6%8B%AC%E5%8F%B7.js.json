{"pageProps":{"post":{"date":"2021 / 3 / 1","slug":"20. 有效的括号.js","content":"<pre> <code class=\"hljs\" ><span class=\"hljs-regexp\">//</span>给定一个只包括 <span class=\"hljs-string\">'('</span>，<span class=\"hljs-string\">')'</span>，<span class=\"hljs-string\">'{'</span>，<span class=\"hljs-string\">'}'</span>，<span class=\"hljs-string\">'['</span>，<span class=\"hljs-string\">']'</span> 的字符串，判断字符串是否有效。\n<span class=\"hljs-regexp\">//</span>\n<span class=\"hljs-regexp\">//</span> 有效字符串需满足：\n<span class=\"hljs-regexp\">//</span>\n<span class=\"hljs-regexp\">//</span> 左括号必须用相同类型的右括号闭合。\n<span class=\"hljs-regexp\">//</span> 左括号必须以正确的顺序闭合。\n<span class=\"hljs-regexp\">//</span> 注意空字符串可被认为是有效字符串。\n<span class=\"hljs-regexp\">//</span>\n<span class=\"hljs-regexp\">//</span> 来源：力扣（LeetCode）\n<span class=\"hljs-regexp\">//</span> 链接：https:<span class=\"hljs-regexp\">//</span>leetcode-cn.com<span class=\"hljs-regexp\">/problems/</span>valid-parentheses\n<span class=\"hljs-regexp\">//</span> 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。\n/**\n * @param {string} s\n * @return {boolean}\n */\n<span class=\"hljs-regexp\">//</span>思路：利用栈来匹配成对的括号，栈中压如左括号，遇到第一个右括号，看是否和栈顶的左括号匹配，直到最后栈为空，\n<span class=\"hljs-regexp\">//</span>如果栈为空，那么就是匹配的，否则不匹配\nvar isValid = <span class=\"hljs-keyword\">function</span> (s) {\n    let zhan = [], i = <span class=\"hljs-number\">0</span>, set = new Set([<span class=\"hljs-string\">'('</span>, <span class=\"hljs-string\">'{'</span>, <span class=\"hljs-string\">'['</span>]);\n    let map = new Map()\n    map.set(<span class=\"hljs-string\">'('</span>, <span class=\"hljs-string\">')'</span>)\n    map.set(<span class=\"hljs-string\">'{'</span>, <span class=\"hljs-string\">'}'</span>)\n    map.set(<span class=\"hljs-string\">'['</span>, <span class=\"hljs-string\">']'</span>)\n\n    <span class=\"hljs-keyword\">while</span> (i &lt; s.length) {\n        <span class=\"hljs-keyword\">if</span> (set.has(s[i])) {\n            zhan.push(s[i])\n        } <span class=\"hljs-keyword\">else</span> {\n            <span class=\"hljs-regexp\">//</span>右括号，就和栈顶的元素相比，看是否匹配\n            let value = map.get(zhan[zhan.length - <span class=\"hljs-number\">1</span>])\n            <span class=\"hljs-keyword\">if</span> (value === s[i]) {\n                zhan.pop()\n            } <span class=\"hljs-keyword\">else</span> {\n                return false\n            }\n        }\n        i++\n    }\n\n    return zhan.length === <span class=\"hljs-number\">0</span>\n};\n</code> </pre>"}},"__N_SSG":true}